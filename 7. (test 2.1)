using NUnit.Framework;

[TestFixture]
public class CountOccurrencesTests
{
    [Test]
    public void CountOccurrences_SubstringExistsMultipleTimes_ReturnsCorrectCount()
    {
        // Arrange
        string text = "ababab";
        string pattern = "ab";
        int expectedCount = 3;

        // Act
        int actualCount = Program.CountOccurrences(text, pattern);

        // Assert
        Assert.AreEqual(expectedCount, actualCount, "The count of occurrences is incorrect.");
    }

    [Test]
    public void CountOccurrences_SubstringExistsOnce_ReturnsOne()
    {
        // Arrange
        string text = "hello";
        string pattern = "lo";
        int expectedCount = 1;

        // Act
        int actualCount = Program.CountOccurrences(text, pattern);

        // Assert
        Assert.AreEqual(expectedCount, actualCount, "The count should be 1 when the substring exists once.");
    }

    [Test]
    public void CountOccurrences_SubstringDoesNotExist_ReturnsZero()
    {
        // Arrange
        string text = "hello";
        string pattern = "world";
        int expectedCount = 0;

        // Act
        int actualCount = Program.CountOccurrences(text, pattern);

        // Assert
        Assert.AreEqual(expectedCount, actualCount, "The count should be 0 when the substring does not exist.");
    }

    [Test]
    public void CountOccurrences_SubstringIsEmpty_ReturnsZero()
    {
        // Arrange
        string text = "hello";
        string pattern = "";
        int expectedCount = 0;

        // Act
        int actualCount = Program.CountOccurrences(text, pattern);

        // Assert
        Assert.AreEqual(expectedCount, actualCount, "The count should be 0 when the substring is empty.");
    }

    [Test]
    public void CountOccurrences_TextIsEmpty_ReturnsZero()
    {
        // Arrange
        string text = "";
        string pattern = "ab";
        int expectedCount = 0;

        // Act
        int actualCount = Program.CountOccurrences(text, pattern);

        // Assert
        Assert.AreEqual(expectedCount, actualCount, "The count should be 0 when the text is empty.");
    }

    [Test]
    public void CountOccurrences_TextAndPatternAreEmpty_ReturnsZero()
    {
        // Arrange
        string text = "";
        string pattern = "";
        int expectedCount = 0;

        // Act
        int actualCount = Program.CountOccurrences(text, pattern);

        // Assert
        Assert.AreEqual(expectedCount, actualCount, "The count should be 0 when both text and pattern are empty.");
    }
}
